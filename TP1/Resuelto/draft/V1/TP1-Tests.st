TestCase subclass: #AlgoFixTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!AlgoFixTest methodsFor: 'tests' stamp: 'LuisParedes 5/17/2020 20:52'!test07PresupuestoPintoresConPincelUtilizanDiferentesPinturasHacenDescuendoDel50PorcientoEnMoCuandoM2EsMayor40EntoncesOfreceElMenorPresupuesto	| algoFix venier presupuesto valorEsperadoConAlba |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 600.	algoFix registrarPintorDeRodillo: 'Tomas' conValorHora: 4000.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 55 conPintura: venier.		"El descuento del %50 lo hacen los pintores con pincel!!"	valorEsperadoConAlba := algoFix  		manoDeObra: 			(55 "M2" * 2 "horas" * 500 "Precio" * 2 "manos" * 0.5) 		masMateriales: 			(55 "M2" * 4 "litros" * 150 "Precio" * 2 "manos").	self assert: 'Pablo' equals: (presupuesto responsable).	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:23'!test08PresupuestoConTecnicaPincel	| algoFix alba venier presupuesto valorEsperadoConAlba valorEsperadoConVenier |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Edson' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Pablo' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperadoConAlba := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Edson' equals: (presupuesto responsable).	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: venier.	valorEsperadoConVenier := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 150 "Precio" * 1 "manos").	self assert: 'Edson' equals: (presupuesto responsable).	self assert: valorEsperadoConVenier closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:20'!test04PresupuestoPintoresUtilizandoRodilloConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Eugenio' conValorHora: 130.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 20 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 130 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 20 "Precio" * 1 "manos").	self assert: 'Eugenio' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'LuisParedes 5/14/2020 18:21'!test01PresupuestoPintorUtilizaPincelConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba  presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda 2 horas en pintar un M2 (metro cuadrado), 	"	"Consumo de material:		- Para pincel cada M2 lleva 4 litros de pintura	"	"Pinturas:		- Alba requiere '1' mano con pincel y '1' mano con rodillo	"	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'LuisParedes 5/17/2020 22:16'!test02PresupuestoPintoresUtilizandoPincelConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 450.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: alba.	valorEsperado := algoFix  		manoDeObra: 			(10 "M2" * 2 "horas" * 450 "Precio" * 1 "manos") 		masMateriales: 			(10 "M2" * 4 "litros" * 150 "Precio" * 1 "manos").	self assert: 'Eugenio' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'LuisParedes 5/16/2020 16:10'!test05PresupuestoPintoresConPincelRodilloOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 340 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 20 conPintura: alba.	valorEsperado := algoFix 		manoDeObra: 			(20 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(20 "M2" * 4 "litros" * 340 "Precio" * 1 "manos").	self assert: 'Pablo' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:20'!test03PresupuestoPintorUtilizaRodilloConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix  		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:21'!test06PresupuestoPinteoresConPincelUtilizanDiferentesPinturasOfreceElMenorPresupuesto	| algoFix venier presupuesto valorEsperadoConVenier |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Martin' conValorHora: 500.	algoFix registrarPintorDePincel: 'Sebastian' conValorHora: 600.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 15 conPintura: venier.		valorEsperadoConVenier := algoFix 		manoDeObra: 			(15 "M2" * 2 "horas" * 500 "Precio" * 2 "manos") 		masMateriales: 			(15 "M2" * 4 "litros" * 150 "Precio" * 2 "manos").	self assert: 'Martin' equals: (presupuesto responsable).	self assert: valorEsperadoConVenier closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'running' stamp: 'tomas 5/12/2020 16:14'!setUp	precision := 0.001! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AlgoFixTest class	instanceVariableNames: 'algoFix'!TestCase subclass: #AlgoFixTestUnitarios	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!AlgoFixTestUnitarios methodsFor: 'test05' stamp: 'LuisParedes 5/22/2020 22:18'!test05PresupuestoPintoresConPincelRodilloOfreceElMenorPresupuestoParte1	| algoFix alba presupuesto |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 340 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 20 conPintura: alba.	self assert: 'Pablo' equals: (presupuesto responsable).! !!AlgoFixTestUnitarios methodsFor: 'test05' stamp: 'LuisParedes 5/22/2020 22:19'!test05PresupuestoPintoresConPincelRodilloOfreceElMenorPresupuestoParte2	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 340 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 20 conPintura: alba.	valorEsperado := algoFix 		manoDeObra: 			(20 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(20 "M2" * 4 "litros" * 340 "Precio" * 1 "manos").	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestUnitarios methodsFor: 'test03' stamp: 'LuisParedes 5/22/2020 22:17'!test03PresupuestoPintorUtilizaRodilloConPinturaAlbaOfreceElMenorPresupuestoParte1	| algoFix alba presupuesto |	algoFix := AlgoFix new.	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	self assert: 'Diego' equals: (presupuesto responsable).! !!AlgoFixTestUnitarios methodsFor: 'test03' stamp: 'LuisParedes 5/22/2020 22:17'!test03PresupuestoPintorUtilizaRodilloConPinturaAlbaOfreceElMenorPresupuestoParte2	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix  		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestUnitarios methodsFor: 'test04' stamp: 'LuisParedes 5/22/2020 22:18'!test04PresupuestoPintoresUtilizandoRodilloConPinturaAlbaOfreceElMenorPresupuestoParte1	| algoFix alba presupuesto |	algoFix := AlgoFix new.	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Eugenio' conValorHora: 130.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 20 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	self assert: 'Eugenio' equals: (presupuesto responsable).! !!AlgoFixTestUnitarios methodsFor: 'test04' stamp: 'LuisParedes 5/22/2020 22:18'!test04PresupuestoPintoresUtilizandoRodilloConPinturaAlbaOfreceElMenorPresupuestoParte2	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Eugenio' conValorHora: 130.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 20 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 130 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 20 "Precio" * 1 "manos").	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestUnitarios methodsFor: 'test06' stamp: 'LuisParedes 5/22/2020 22:19'!test06PresupuestoPinteoresConPincelUtilizanDiferentesPinturasOfreceElMenorPresupuestoParte1	| algoFix venier presupuesto |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Martin' conValorHora: 500.	algoFix registrarPintorDePincel: 'Sebastian' conValorHora: 600.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 15 conPintura: venier.		self assert: 'Martin' equals: (presupuesto responsable).! !!AlgoFixTestUnitarios methodsFor: 'test06' stamp: 'LuisParedes 5/22/2020 22:20'!test06PresupuestoPinteoresConPincelUtilizanDiferentesPinturasOfreceElMenorPresupuestoParte2	| algoFix venier presupuesto valorEsperadoConVenier |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Martin' conValorHora: 500.	algoFix registrarPintorDePincel: 'Sebastian' conValorHora: 600.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 15 conPintura: venier.		valorEsperadoConVenier := algoFix 		manoDeObra: 			(15 "M2" * 2 "horas" * 500 "Precio" * 2 "manos") 		masMateriales: 			(15 "M2" * 4 "litros" * 150 "Precio" * 2 "manos").	self assert: valorEsperadoConVenier closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestUnitarios methodsFor: 'test08' stamp: 'LuisParedes 5/22/2020 22:26'!test08PresupuestoConTecnicaPincelParte3	| algoFix venier presupuesto |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Edson' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Pablo' conValorHora: 800.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: venier.	self assert: 'Edson' equals: (presupuesto responsable).! !!AlgoFixTestUnitarios methodsFor: 'test08' stamp: 'LuisParedes 5/22/2020 22:27'!test08PresupuestoConTecnicaPincelParte4	| algoFix venier presupuesto valorEsperadoConVenier |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Edson' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Pablo' conValorHora: 800.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: venier.	valorEsperadoConVenier := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 150 "Precio" * 1 "manos").	self assert: valorEsperadoConVenier closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestUnitarios methodsFor: 'test08' stamp: 'LuisParedes 5/22/2020 22:24'!test08PresupuestoConTecnicaPincelParte1	| algoFix alba presupuesto |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Edson' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Pablo' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	self assert: 'Edson' equals: (presupuesto responsable).! !!AlgoFixTestUnitarios methodsFor: 'test08' stamp: 'LuisParedes 5/22/2020 22:25'!test08PresupuestoConTecnicaPincelParte2	| algoFix alba presupuesto valorEsperadoConAlba |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Edson' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Pablo' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperadoConAlba := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestUnitarios methodsFor: 'running' stamp: 'LuisParedes 5/23/2020 08:59'!setUp	precision := 0.001! !!AlgoFixTestUnitarios methodsFor: 'test02' stamp: 'LuisParedes 5/22/2020 22:14'!test02PresupuestoPintoresUtilizandoPincelConPinturaAlbaOfreceElMenorPresupuestoParte1	| algoFix alba presupuesto |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 450.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: alba.	self assert: 'Eugenio' equals: (presupuesto responsable).! !!AlgoFixTestUnitarios methodsFor: 'test02' stamp: 'LuisParedes 5/22/2020 22:14'!test02PresupuestoPintoresUtilizandoPincelConPinturaAlbaOfreceElMenorPresupuestoParte2	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 450.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: alba.	valorEsperado := algoFix  		manoDeObra: 			(10 "M2" * 2 "horas" * 450 "Precio" * 1 "manos") 		masMateriales: 			(10 "M2" * 4 "litros" * 150 "Precio" * 1 "manos").	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestUnitarios methodsFor: 'test01' stamp: 'LuisParedes 5/22/2020 22:13'!test01PresupuestoPintorUtilizaPincelConPinturaAlbaOfreceElMenorPresupuestoParte2	| algoFix alba  presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 200 "Precio" * 1 "manos").	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestUnitarios methodsFor: 'test01' stamp: 'LuisParedes 5/23/2020 17:48'!test01PresupuestoPintorUtilizaPincelConPinturaAlbaOfreceElMenorPresupuestoParte1	| algoFix alba  presupuesto |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	self assert: 'Diego' equals: (presupuesto responsable).! !!AlgoFixTestUnitarios methodsFor: 'test07' stamp: 'LuisParedes 5/22/2020 22:22'!test07PresupuestoPintoresConPincelUtilizanDiferentesPinturasHacenDescuendoDel50PorcientoEnMoCuandoM2EsMayor40EntoncesOfreceElMenorPresupuestoParte2	| algoFix venier presupuesto valorEsperadoConAlba |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 600.	algoFix registrarPintorDeRodillo: 'Tomas' conValorHora: 4000.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 55 conPintura: venier.		"El descuento del %50 lo hacen los pintores con pincel!!"	valorEsperadoConAlba := algoFix  		manoDeObra: 			(55 "M2" * 2 "horas" * 500 "Precio" * 2 "manos" * 0.5) 		masMateriales: 			(55 "M2" * 4 "litros" * 150 "Precio" * 2 "manos").	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestUnitarios methodsFor: 'test07' stamp: 'LuisParedes 5/22/2020 22:20'!test07PresupuestoPintoresConPincelUtilizanDiferentesPinturasHacenDescuendoDel50PorcientoEnMoCuandoM2EsMayor40EntoncesOfreceElMenorPresupuestoParte1	| algoFix venier presupuesto |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 600.	algoFix registrarPintorDeRodillo: 'Tomas' conValorHora: 4000.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 55 conPintura: venier.		self assert: 'Pablo' equals: (presupuesto responsable).! !TestCase subclass: #AlgoTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!AlgoTest methodsFor: 'tests' stamp: 'LuisParedes 5/18/2020 19:05'!test01AlCrearUnaNuevaEmpresaYAsignarleUnEmpleadoEntoncesElNumeroDeEmpleadosEs1	| algoFix empleadosEsperados numeroEmpleados|	algoFix := AlgoFix new.	empleadosEsperados := 1.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	numeroEmpleados := algoFix cantEmpleados.		self assert: numeroEmpleados equals: empleadosEsperados.! !!AlgoTest methodsFor: 'tests' stamp: 'LuisParedes 5/25/2020 10:44'!test04AlCrearUnaNuevaEmpresaYAsignarleCincoEmpleadosConPinturaAlbaEntoncesElDeMenorPresupuestoEsElElegido	| algoFix nombreEsperado alba presupuesto|	algoFix := AlgoFix new.	nombreEsperado := 'Jose'.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.		algoFix registrarPintorDePincel: 'Jose' conValorHora: 10.	algoFix registrarPintorDePincel: 'Maria' conValorHora: 230.	algoFix registrarPintorDePincel: 'Sofia' conValorHora: 1000.	algoFix registrarPintorDePincel: 'Luis' conValorHora: 320.		alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.		presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: alba.		self assert: nombreEsperado equals: (presupuesto responsable).! !!AlgoTest methodsFor: 'tests' stamp: 'LuisParedes 5/17/2020 09:37'!test02AlCrearUnaNuevaEmpresaYAsignarleCincoEmpleadosEntoncesElNumeroDeEmpleadosEsCinco	| algoFix empleadosEsperados numeroEmpleados|	algoFix := AlgoFix new.	empleadosEsperados := 5.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.		algoFix registrarPintorDePincel: 'Jose' conValorHora: 10.	algoFix registrarPintorDePincel: 'Maria' conValorHora: 230.	algoFix registrarPintorDePincel: 'Sofia' conValorHora: 1000.	algoFix registrarPintorDePincel: 'Luis' conValorHora: 320.	numeroEmpleados := algoFix cantEmpleados.		self assert: numeroEmpleados equals: empleadosEsperados.! !!AlgoTest methodsFor: 'tests' stamp: 'LuisParedes 5/25/2020 10:47'!test03AlCrearUnaNuevaEmpresaYAsignarleUnEmpleadoConPinturaAlbaEntoncesElDeMenorPresupuestoEsElElegido	| algoFix nombreEsperado alba presupuesto|	algoFix := AlgoFix new.	nombreEsperado := 'Jose'.			algoFix registrarPintorDePincel: 'Jose' conValorHora: 10.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.		presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: alba.		self assert: nombreEsperado equals: (presupuesto responsable).! !!AlgoTest methodsFor: 'tests' stamp: 'LuisParedes 5/25/2020 10:45'!test05AlCrearUnPintorConPincelQueCobra500HoraConPinturaAlbaDe200LitroDeUnaManoEntoncesAlPintarUnMetroCobra9000	| algoFix alba  presupuesto valorEsperado|	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 200 "Precio" * 1 "manos").					self assert: valorEsperado closeTo: (presupuesto valor).! !TestCase subclass: #HerramientasTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!HerramientasTest methodsFor: 'pincelTest' stamp: 'LuisParedes 5/23/2020 12:54'!test03AlPintar1M2ConPincelEntoncesElTiempoDeTrabajoEs2Horas	self assert: (Pincel new horasTrabajoM2: 1) equals: 2.! !!HerramientasTest methodsFor: 'pincelTest' stamp: 'LuisParedes 5/26/2020 09:18'!test01AlCrearUnPincelEntoncesSuDescuentoParaMasDe40M2Es50		self assert: (Pincel new descuentoMas40M2) equals: 0.5.! !!HerramientasTest methodsFor: 'pincelTest' stamp: 'LuisParedes 5/23/2020 12:55'!test05AlPintar1M2ConPincelEntoncesElConsumoDePinturaEs4Litros	self assert: (Pincel new litrosPinturaUsarM2: 1) equals: 4.! !!HerramientasTest methodsFor: 'exceptions' stamp: 'LuisParedes 5/26/2020 09:20'!test07AlPintarUnNumeroInvalidoDeM2EntoncesDevuelveExcepcionEnDescuento		self should: [ Pincel new descuento: -1 deCosto: -1] raise: ValorInvalido.! !!HerramientasTest methodsFor: 'exceptions' stamp: 'LuisParedes 5/23/2020 13:46'!test08AlPintarUnNumeroInvalidoDeM2EntoncesDevuelveExcepcionEnHorasTrabajo	self should: [ Pincel new horasTrabajoM2: -1 ] raise: ValorInvalido.! !!HerramientasTest methodsFor: 'exceptions' stamp: 'LuisParedes 5/23/2020 13:46'!test09AlPintarUnNumeroInvalidoDeM2EntoncesDevuelveExcepcionEnLitrosPinturaUsarM2	self should: [ Pincel new litrosPinturaUsarM2: -1 ] raise: ValorInvalido.! !!HerramientasTest methodsFor: 'rodilloTest' stamp: 'LuisParedes 5/23/2020 12:54'!test04AlPintar1M2ConRodilloEntoncesElTiempoDeTrabajoEs1Hora	self assert: (Rodillo new horasTrabajoM2: 1) equals: 1.! !!HerramientasTest methodsFor: 'rodilloTest' stamp: 'LuisParedes 5/23/2020 12:55'!test06AlPintar1M2ConRodilloEntoncesElConsumoDePinturaEs4Litros5	self assert: (Rodillo new litrosPinturaUsarM2: 1) equals: 5.! !!HerramientasTest methodsFor: 'rodilloTest' stamp: 'LuisParedes 5/26/2020 09:18'!test02AlCrearUnRodilloEntoncesSuDescuentoParaMasDe40M2Es0		self assert: (Rodillo new descuentoMas40M2) equals: 0.! !TestCase subclass: #PintorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PintorTest methodsFor: 'exceptions' stamp: 'LuisParedes 5/23/2020 13:38'!test03AlCrearUnPintorConPinturaYPintaUnNumeroInvalidoDeM2EntoncesLanzaExcepcion	| pintor alba valorInvalido |		valorInvalido := -1.	pintor := Pintor registrarPintorDeRodillo: 'Luis' conValorHora: 500.	alba := Pintura crearPintura: 'alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	self should: [ pintor calcularCostoM2: valorInvalido conPintura: alba  ] raise: ValorInvalido.! !!PintorTest methodsFor: 'exceptions' stamp: 'LuisParedes 5/23/2020 11:33'!test02AlCrearUnPintorDeRodilloConValorPorHoraInvalidoEntoncesDevuelveValorInvalido	|nombreGenerico valorInvalido|		nombreGenerico:= 'Pepito'.	valorInvalido := -500.		self should: [Pintor registrarPintorDeRodillo: nombreGenerico conValorHora: valorInvalido ] raise: ValorInvalido. ! !!PintorTest methodsFor: 'exceptions' stamp: 'LuisParedes 5/23/2020 12:32'!test01AlCrearUnPintorDePincelConValorPorHoraInvalidoEntoncesDevuelveValorInvalido		|nombreGenerico valorInvalido|		nombreGenerico:= 'Pepito'.	valorInvalido := -500.		self should: [Pintor registrarPintorDePincel: nombreGenerico conValorHora: valorInvalido ] 			raise: ValorInvalido. ! !!PintorTest methodsFor: 'tests' stamp: 'LuisParedes 5/23/2020 13:33'!test04AlCrearUnPintorConPincelQueCobraPorHora500YPinturaAlbaConCostoPorLitro200ConUnaManoPincelEntoncesAlPintar41MetrosCuadradosAplica50PorcientoDescuento		| pintor alba valorEsperado|	"Arrange"	pintor := Pintor registrarPintorDePincel: 'Luis' conValorHora: 500.	alba := Pintura crearPintura: 'alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.		"Act"	pintor calcularCostoM2: 41 conPintura: alba. 		valorEsperado := (41 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") - (41 * 2 * 500 * 1 * 0.5 "Descuento") +								(41 "M2" * 4 "litros" * 200 "Precio" * 1 "manos").					"Assert"	self assert: valorEsperado closeTo: pintor valor.! !!PintorTest methodsFor: 'tests' stamp: 'LuisParedes 5/23/2020 13:34'!test05AlCrearUnPintorConRodilloQueCobraPorHora500YPinturaAlbaConCostoPorLitro200ConUnaManoPincelEntoncesAlPintar41MetrosCuadradosNoAplica50PorcientoDescuento"Con el Rodillo no se aplica descuento"		| pintor alba valorEsperado|	"Arrange"	pintor := Pintor registrarPintorDeRodillo: 'Luis' conValorHora: 500.		alba := Pintura crearPintura: 'alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.		"Act"	pintor calcularCostoM2: 41 conPintura: alba. 		valorEsperado := (41 "M2" * 1 "horas" * 500 "Precio" * 1 "manos") - (41 * 2 * 500 * 1 * 0 "Descuento") +								(41 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").					"Assert"	self assert: valorEsperado closeTo: pintor valor.! !TestCase subclass: #PinturaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PinturaTest methodsFor: 'exceptions' stamp: 'LuisParedes 5/17/2020 21:47'!test03AlCrearUnaPinturaConDatosInvalidosEntoncesDevuelveValorInvalido		|valorInvalido |		valorInvalido := -1.		self should: [ Pintura crearPintura: 'nombre' conPrecioPorLitro: valorInvalido manosPincel: valorInvalido manosRodillo: valorInvalido  ] raise: ValorInvalido.! !!PinturaTest methodsFor: 'exceptions' stamp: 'LuisParedes 5/23/2020 13:38'!test08AlRecibirUnaPinturaUnNumeroLitrosInvalidoParaCalcularElPresupuestoEntoncesLanzaExcepcionValorInvalido	|pintura valorInvalido|		valorInvalido := -1.	pintura := Pintura crearPintura: 'alba' conPrecioPorLitro: 10 manosPincel: 1 manosRodillo: 1.		self should: [ pintura presupuestoLitros: valorInvalido ] raise: ValorInvalido.	! !!PinturaTest methodsFor: 'tests' stamp: 'LuisParedes 5/17/2020 10:10'!test01AlCrearPinturaAlbaPrecioPorLitro200ManosPincel1ManosRodillo1AlUsar1LitroEntoncesElPresupuestoPinturaEs200	| algoFix presupuestoEsperado alba presupuestoPintura|	algoFix := AlgoFix new.	presupuestoEsperado := 200.		alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuestoPintura := alba presupuestoLitros: 1.		self assert: presupuestoPintura equals: presupuestoEsperado.! !!PinturaTest methodsFor: 'tests' stamp: 'LuisParedes 5/23/2020 12:45'!test07AlPintarConRodilloYVenierEntoncesNumManosEs1	|rodillo alba|	rodillo := Rodillo new.	alba := Pintura crearPintura: 'Venier' conPrecioPorLitro: 200 manosPincel: 2 manosRodillo: 1.		self assert: (rodillo numeroManos: alba) equals: 1.! !!PinturaTest methodsFor: 'tests' stamp: 'LuisParedes 5/17/2020 21:32'!test02AlCrearPinturaAlbaPrecioPorLitro200ManosPincel1ManosRodillo1AlUsar8LitrosEntoncesElPresupuestoPinturaEs1600	| algoFix presupuestoEsperado alba presupuestoPintura|	algoFix := AlgoFix new.	presupuestoEsperado := 1600.		alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuestoPintura := alba presupuestoLitros: 8.		self assert: presupuestoPintura equals: presupuestoEsperado.! !!PinturaTest methodsFor: 'tests' stamp: 'LuisParedes 5/23/2020 12:44'!test06AlPintarConPincelYVenierEntoncesNumManosEs2	|pincel alba|	pincel := Pincel new.	alba := Pintura crearPintura: 'Venier' conPrecioPorLitro: 200 manosPincel: 2 manosRodillo: 1.		self assert: (pincel numeroManos: alba) equals: 2.! !!PinturaTest methodsFor: 'tests' stamp: 'LuisParedes 5/23/2020 12:42'!test04AlPintarConPincelYAlbaEntoncesNumManosEs1	|pincel alba|	pincel := Pincel new.	alba := Pintura crearPintura: 'alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.		self assert: (pincel numeroManos: alba) equals: 1.! !!PinturaTest methodsFor: 'tests' stamp: 'LuisParedes 5/23/2020 12:43'!test05AlPintarConRodilloYAlbaEntoncesNumManosEs1	|rodillo alba|	rodillo := Rodillo new.	alba := Pintura crearPintura: 'alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.		self assert: (rodillo numeroManos: alba) equals: 1.! !TestCase subclass: #PruebasIntegracion	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PruebasIntegracion methodsFor: 'tests' stamp: 'LuisParedes 5/23/2020 18:04'!test02AlCrearUnaEmpresaConPintoresDeDistintasHerramientasYUsandoArbaCuandoSePintaMasDe40M2EntoncesEligeElDeMenorPresupuesto	| algoFix nombreEsperado alba presupuesto valorEsperado |	algoFix := AlgoFix new.	nombreEsperado := 'Diego'. "El mas barato de Pincel"		algoFix registrarPintorDePincel: 'Diego' conValorHora: 150.		algoFix registrarPintorDeRodillo: 'Jose' conValorHora: 80.	algoFix registrarPintorDePincel: 'Maria' conValorHora: 430.	algoFix registrarPintorDeRodillo: 'Marina' conValorHora: 240.	algoFix registrarPintorDePincel: 'Sofia' conValorHora: 1030.	algoFix registrarPintorDeRodillo: 'Luisa' conValorHora: 130.	algoFix registrarPintorDePincel: 'Luis' conValorHora: 320.		alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.		presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 101 conPintura: alba.	valorEsperado := algoFix  		manoDeObra: 			(101 "M2" * 2 "horas" * 150 "Precio" * 1 "manos" * 0.5) 		masMateriales: 			(101 "M2" * 4 "litros" * 150 "Precio" * 1 "manos").			self assert: nombreEsperado equals: (presupuesto responsable).	self assert: valorEsperado equals: (presupuesto valor).! !!PruebasIntegracion methodsFor: 'tests' stamp: 'LuisParedes 5/23/2020 18:12'!test01AlCrearUnaEmpresaConPintoresDeDistintasHerramientasYUsandoArbaEntoncesEligeElDeMenorPresupuesto	| algoFix nombreEsperado alba presupuesto valorEsperado |	algoFix := AlgoFix new.	nombreEsperado := 'Diego'.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 	10.		algoFix registrarPintorDeRodillo: 'Jose' conValorHora: 30.	algoFix registrarPintorDePincel: 'Maria' conValorHora: 40.	algoFix registrarPintorDeRodillo: 'Marina' conValorHora: 20.	algoFix registrarPintorDePincel: 'Sofia' conValorHora: 15.	algoFix registrarPintorDeRodillo: 'Luisa' conValorHora: 23.	algoFix registrarPintorDePincel: 'Luis' conValorHora: 32.		alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.		presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 30 conPintura: alba.		valorEsperado := algoFix  		manoDeObra: 			(30 "M2" * 2 "horas" * 10 "Precio" * 1 "manos" ) 		masMateriales: 			(30 "M2" * 4 "litros" * 150 "Precio" * 1 "manos").		self assert: nombreEsperado equals: (presupuesto responsable).	self assert: valorEsperado equals: (presupuesto valor).! !!PruebasIntegracion methodsFor: 'tests' stamp: 'LuisParedes 5/23/2020 18:22'!test04AlCrearUnaEmpresaConPintoresDeDistintasHerramientasYUsandoVenierCuandoSePintaMasDe40M2EntoncesEligeElDeMenorPresupuesto	| algoFix nombreEsperado venier presupuesto valorEsperado |	algoFix := AlgoFix new.	nombreEsperado := 'Jose'.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 150.		algoFix registrarPintorDeRodillo: 'Jose' conValorHora: 80.	algoFix registrarPintorDePincel: 'Maria' conValorHora: 430.	algoFix registrarPintorDeRodillo: 'Marina' conValorHora: 240.	algoFix registrarPintorDePincel: 'Sofia' conValorHora: 1030.	algoFix registrarPintorDeRodillo: 'Luisa' conValorHora: 130.	algoFix registrarPintorDePincel: 'Luis' conValorHora: 320.		venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.		presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 101 conPintura: venier.	valorEsperado := algoFix  		manoDeObra: 			(101 "M2" * 1 "horas" * 80 "Precio" * 1 "manos") 		masMateriales: 			(101 "M2" * 5 "litros" * 150 "Precio" * 1 "manos").			self assert: nombreEsperado equals: (presupuesto responsable).	self assert: valorEsperado equals: (presupuesto valor).! !!PruebasIntegracion methodsFor: 'tests' stamp: 'LuisParedes 5/23/2020 18:18'!test03AlCrearUnaEmpresaConPintoresDeDistintasHerramientasYUsandoVenierEntoncesEligeElDeMenorPresupuesto	| algoFix nombreEsperado presupuesto venier valorEsperado |	algoFix := AlgoFix new.	nombreEsperado := 'Jose'.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.		algoFix registrarPintorDeRodillo: 'Jose' conValorHora: 10.	algoFix registrarPintorDePincel: 'Maria' conValorHora: 230.	algoFix registrarPintorDeRodillo: 'Marina' conValorHora: 140.	algoFix registrarPintorDePincel: 'Sofia' conValorHora: 1000.	algoFix registrarPintorDeRodillo: 'Luisa' conValorHora: 130.	algoFix registrarPintorDePincel: 'Luis' conValorHora: 320.		venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.		presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 120 conPintura: venier.		valorEsperado := algoFix  		manoDeObra: 			(120 "M2" * 1 "horas" * 10 "Precio" * 1 "manos" ) 		masMateriales: 			(120 "M2" * 5 "litros" * 150 "Precio" * 1 "manos").		self assert: nombreEsperado equals: (presupuesto responsable).	self assert:  valorEsperado equals: (presupuesto valor).! !