Object subclass: #Funcion2	instanceVariableNames: ''	classVariableNames: ''	package: 'Clase-6-caso-2'!!Funcion2 methodsFor: 'as yet unclassified' stamp: 'Pablo 5/18/2020 18:56'!calcularEn: unValor.	self subclassResponsibility.! !Funcion2 subclass: #Constante	instanceVariableNames: 'valor'	classVariableNames: ''	package: 'Clase-6-caso-2'!!Constante methodsFor: 'initialization - private' stamp: 'Pablo 5/18/2020 19:16'!calcularEn: unValor	"no me importa que venga, soy una constante devuelvo siempre el mismo valor"	^ valor.! !!Constante methodsFor: 'initialization - private' stamp: 'Pablo 5/18/2020 19:13'!valor: unValor	valor := unValor.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Constante class	instanceVariableNames: ''!!Constante class methodsFor: 'as yet unclassified' stamp: 'Pablo 5/18/2020 19:14'!inicializarCon: unValorConstante	|constante|	constante := self new.	constante valor: unValorConstante.	^ constante.! !Funcion2 subclass: #Multiplicacion	instanceVariableNames: 'funcion1 funcion2'	classVariableNames: ''	package: 'Clase-6-caso-2'!!Multiplicacion methodsFor: 'as yet unclassified' stamp: 'Pablo 5/18/2020 19:12'!calcularEn: unValor	^ (funcion1 calcularEn: unValor) * (funcion2 calcularEn: unValor).! !!Multiplicacion methodsFor: 'accessing' stamp: 'Pablo 5/18/2020 19:00'!funcion2: unaFuncion	funcion2 := unaFuncion.! !!Multiplicacion methodsFor: 'accessing' stamp: 'Pablo 5/18/2020 19:00'!funcion1: unaFuncion	funcion1 := unaFuncion.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Multiplicacion class	instanceVariableNames: ''!!Multiplicacion class methodsFor: 'as yet unclassified' stamp: 'Pablo 5/18/2020 18:59'!inicializarCon: unaFuncion y: otraFuncion	|multiplicacion|	multiplicacion := self new.	multiplicacion funcion1: unaFuncion.	multiplicacion funcion2: otraFuncion.	^multiplicacion.! !Funcion2 subclass: #Suma	instanceVariableNames: 'funcion1 funcion2'	classVariableNames: ''	package: 'Clase-6-caso-2'!!Suma methodsFor: 'accessing' stamp: 'Pablo 5/18/2020 18:58'!funcion2: unaFuncion	funcion2 := unaFuncion.! !!Suma methodsFor: 'accessing' stamp: 'Pablo 5/18/2020 18:58'!funcion1: unaFuncion	funcion1 := unaFuncion.! !!Suma methodsFor: 'as yet unclassified' stamp: 'Pablo 5/18/2020 19:12'!calcularEn: unValor	^ (funcion1 calcularEn: unValor) + (funcion2 calcularEn: unValor).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Suma class	instanceVariableNames: ''!!Suma class methodsFor: 'as yet unclassified' stamp: 'Pablo 5/18/2020 18:59'!inicializarCon: unaFuncion y: otraFuncion	|suma|	suma := self new.	suma funcion1: unaFuncion.	suma funcion2: otraFuncion.	^suma.! !Funcion2 subclass: #X	instanceVariableNames: ''	classVariableNames: ''	package: 'Clase-6-caso-2'!!X methodsFor: 'as yet unclassified' stamp: 'Pablo 5/18/2020 19:13'!calcularEn: unValor	^ unValor.! !Object subclass: #Arbol	instanceVariableNames: 'valor'	classVariableNames: ''	package: 'Clase-6-caso-1'!!Arbol methodsFor: 'as yet unclassified' stamp: 'Pablo 5/18/2020 18:40'!getIzquierda! !!Arbol methodsFor: 'as yet unclassified' stamp: 'Pablo 5/18/2020 18:34'!getValor	^ valor.! !!Arbol methodsFor: 'as yet unclassified' stamp: 'Pablo 5/18/2020 18:39'!getDerecha! !Object subclass: #Funcion	instanceVariableNames: 'expresion arbol'	classVariableNames: ''	package: 'Clase-6-caso-1'!!Funcion methodsFor: 'initialization' stamp: 'Pablo 5/18/2020 18:26'!arbol: unArbol	arbol := unArbol.! !!Funcion methodsFor: 'initialization' stamp: 'Pablo 5/18/2020 18:27'!expresion: unaExpresion	expresion := unaExpresion.! !!Funcion methodsFor: 'as yet unclassified' stamp: 'Pablo 5/18/2020 18:33'!calcularEn: unValor	^ (self calcular: arbol Con: unValor).! !!Funcion methodsFor: 'as yet unclassified' stamp: 'Pablo 5/18/2020 18:43'!calcular: unArbol Con: unValor	|resultado operacion|	resultado := 0.	operacion := unArbol getValor.		(operacion == '+') ifTrue: [		resultado := (self calcularEn: (unArbol getDerecha)) + (self calcularEn: (unArbol getIzquierda)).	].	(operacion == '*') ifTrue: [		resultado := (self calcularEn: (unArbol getDerecha)) * (self calcularEn: (unArbol getIzquierda)).	].	" ... Idem para el resto de las operaciones ..."		(operacion == 'x') ifTrue: [		resultado :='x'	].	" ... "	^ resultado.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Funcion class	instanceVariableNames: 'arbol'!!Funcion class methodsFor: 'as yet unclassified' stamp: 'Pablo 5/18/2020 18:27'!inicializarCon:unaExpresion	|funcion|	funcion := self new.	funcion expresion: unaExpresion.	funcion arbol: (Parser parsear: unaExpresion).	^ funcion.! !!Funcion class methodsFor: 'as yet unclassified' stamp: 'Pablo 5/18/2020 18:44'!calcularEn: unValor	^ (self calcular: arbol Con: unValor).! !Object subclass: #Parser	instanceVariableNames: ''	classVariableNames: ''	package: 'Clase-6-caso-1'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Parser class	instanceVariableNames: ''!!Parser class methodsFor: 'as yet unclassified' stamp: 'Pablo 5/18/2020 18:45'!parsear: unaExpresion "proceso la expresion ..."	^ Arbol new.! !Object subclass: #Evaluacion	instanceVariableNames: 'punto valor'	classVariableNames: ''	package: 'Clase-6-caso-3'!!Evaluacion methodsFor: 'accessing' stamp: 'Pablo 5/19/2020 19:08'!punto	^punto.! !!Evaluacion methodsFor: 'accessing' stamp: 'Pablo 5/19/2020 19:08'!punto: unPunto	punto := unPunto.! !!Evaluacion methodsFor: 'accessing' stamp: 'Pablo 5/19/2020 19:08'!valor	^valor.! !!Evaluacion methodsFor: 'accessing' stamp: 'Pablo 5/19/2020 19:08'!valor: unValor	valor := unValor.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Evaluacion class	instanceVariableNames: ''!!Evaluacion class methodsFor: 'as yet unclassified' stamp: 'Pablo 5/19/2020 19:08'!inicializarCon: unPunto y: unValor	|evaluacion|	evaluacion := self new.	evaluacion punto: unPunto.	evaluacion valor: unValor.	^ evaluacion.! !Object subclass: #Funcion3	instanceVariableNames: ''	classVariableNames: ''	package: 'Clase-6-caso-3'!!Funcion3 methodsFor: 'initialization - private' stamp: 'Pablo 5/19/2020 19:04'!getMaximoEn: intervalo	|evaluaciones maximo|	evaluaciones  := self calcularEnUnIntervalo: intervalo.	maximo := evaluaciones at: 0. 	evaluaciones do: [ :evaluacion | 		((evaluacion valor) mayorQue: (maximo valor)) ifTrue: [			maximo := evaluacion.		]	].  ^ maximo.! !!Funcion3 methodsFor: 'initialization - private' stamp: 'Pablo 5/19/2020 19:07'!calcularEnUnIntervalo: intervalo	|resultado|	resultado := (intervalo puntos) collect: [ :punto | 		Evaluacion inicializarCon: punto y: (self calcularEn: punto)	].  ^ resultado.! !!Funcion3 methodsFor: 'initialization - private' stamp: 'Pablo 5/19/2020 19:08'!calcularEn: unPunto.	self subclassResponsibility.! !Funcion3 subclass: #Constante3	instanceVariableNames: 'valor'	classVariableNames: ''	package: 'Clase-6-caso-3'!!Constante3 methodsFor: 'accessing' stamp: 'Pablo 5/19/2020 19:08'!valor: unValor	valor := unValor.! !!Constante3 methodsFor: 'initialization - private' stamp: 'Pablo 5/19/2020 19:08'!calcularEn: unPunto	^ (Evaluacion inicializarCon: unPunto y: valor).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Constante3 class	instanceVariableNames: ''!!Constante3 class methodsFor: 'as yet unclassified' stamp: 'Pablo 5/19/2020 19:08'!inicializarCon: unValor	|constante|	constante := self new.	constante valor: unValor.	^ constante.! !Object subclass: #Intervalo	instanceVariableNames: 'puntos'	classVariableNames: ''	package: 'Clase-6-caso-3'!!Intervalo methodsFor: 'initialization' stamp: 'Pablo 5/19/2020 19:07'!initialize 	puntos := OrderedCollection new.! !!Intervalo methodsFor: 'as yet unclassified' stamp: 'Pablo 5/19/2020 19:07'!puntos	^ puntos.! !!Intervalo methodsFor: 'as yet unclassified' stamp: 'Pablo 5/19/2020 19:07'!agregarPunto: unPunto	puntos add: unPunto.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Intervalo class	instanceVariableNames: ''!!Intervalo class methodsFor: 'as yet unclassified' stamp: 'Pablo 5/19/2020 19:57'!incializarDesde: unPunto hasta: otroPunto	|intervalo|	intervalo := self new.	"Que quiere decir ir de unPunto hasta otroPunto en R2, R3, etc.. ?	 Como son los 'saltos' de unPunto a otro ?"	intervalo agregarPunto: unPunto.	"intervalo agregarPunto: puntoIntermedio1	 intervalo agregarPunto: puntoIntermedio2	 intervalo agregarPunto: puntoIntermedioN"	intervalo agregarPunto: otroPunto.	^ intervalo.! !Object subclass: #Punto	instanceVariableNames: 'x y'	classVariableNames: ''	package: 'Clase-6-caso-3'!!Punto methodsFor: 'accessing' stamp: 'Pablo 5/19/2020 19:08'!y: unValor	y := unValor.! !!Punto methodsFor: 'accessing' stamp: 'Pablo 5/19/2020 19:05'!y	^y.! !!Punto methodsFor: 'accessing' stamp: 'Pablo 5/19/2020 19:05'!x	^x.! !!Punto methodsFor: 'accessing' stamp: 'Pablo 5/19/2020 19:08'!x: unValor	x := unValor.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Punto class	instanceVariableNames: ''!!Punto class methodsFor: 'as yet unclassified' stamp: 'Pablo 5/19/2020 19:08'!inicializarCon: unValorX y: unValorY! !Object subclass: #Valor	instanceVariableNames: 'valor'	classVariableNames: ''	package: 'Clase-6-caso-3'!!Valor methodsFor: 'accessing' stamp: 'Pablo 5/19/2020 19:08'!getRepresentacionFlotante	^ valor.! !!Valor methodsFor: 'accessing' stamp: 'Pablo 5/19/2020 19:09'!mayorQue: otroValor	^ (valor > (otroValor getRepresentacionFlotante)).! !!Valor methodsFor: 'accessing' stamp: 'Pablo 5/19/2020 19:08'!igualQue: otroValor	^ (valor = (otroValor getRepresentacionFlotante)).! !!Valor methodsFor: 'accessing' stamp: 'Pablo 5/19/2020 19:08'!valor: unValor	valor := unValor.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Valor class	instanceVariableNames: ''!!Valor class methodsFor: 'as yet unclassified' stamp: 'Pablo 5/19/2020 19:08'!inicializarCon: unValorNumerico |valor|	valor := self new.	valor valor: unValorNumerico.	^ valor.! !Funcion3 subclass: #X3	instanceVariableNames: ''	classVariableNames: ''	package: 'Clase-6-caso-3'!!X3 methodsFor: 'initialization - private' stamp: 'Pablo 5/19/2020 19:08'!calcularEn: unPunto	^ (Evaluacion inicializarCon: unPunto  y: (unPunto x)).! !Funcion3 subclass: #Y	instanceVariableNames: ''	classVariableNames: ''	package: 'Clase-6-caso-3'!!Y methodsFor: 'initialization - private' stamp: 'Pablo 5/19/2020 19:07'!calcularEn: unPunto	^ (Evaluacion inicializarCon: unPunto  y: (unPunto y)).! !