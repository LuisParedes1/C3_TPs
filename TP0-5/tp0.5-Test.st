TestCase subclass: #PruebasClub	instanceVariableNames: 'club'	classVariableNames: ''	package: 'tp0.5-Test'!!PruebasClub commentStamp: 'tomas 4/25/2020 11:52' prior: 0!Pruebas unitarias del Club Social y Deportivo Orientado a Objetos!!PruebasClub methodsFor: 'tests' stamp: 'tomas 4/25/2020 11:41'!test02SeAgreganDosSociosAlClubYSeDevuelveElConjuntoDeSusNombres	" Arrange "	| socio1 socio2 nombresSocios |		socio1 := Socio new.	socio1 establecerNombre: 'Carlos'.	club agregarSocio: socio1.	socio2 := Socio new.	socio2 establecerNombre: 'Marcio'.	club agregarSocioVIP: socio2.		" Act "	nombresSocios := club nombresSocios.		" Assert "	self assertCollection: nombresSocios equals: (Set withAll: #('Marcio' 'Carlos'))! !!PruebasClub methodsFor: 'tests' stamp: 'LuisParedes 4/28/2020 14:36'!test12AlAgregarUnSocioEntoncesSoloExisteUnSocio	" Arrange "	|socio1 cantSocios|		socio1 := Socio new.	socio1 establecerNombre: 'Carlos'.	club agregarSocio: socio1.		" Act "	cantSocios:= club cantidadDeSocios.		" Assert "	self assert: cantSocios equals: 1! !!PruebasClub methodsFor: 'tests' stamp: 'tomas 4/25/2020 11:46'!test10SeAgreganDosSociosComunesYOtroVipYRealizanSietePagosComunYLaCantidadPagadaPorElPrimerSocioComunEs2000	" Arrange "	| socio1 socio2 socio3 cantidadPagada |		socio1 := Socio new.	socio1 establecerNombre: 'Carlos'.	socio2 := Socio new.	socio2 establecerNombre: 'Marcio'.	socio3 := Socio new.	socio3 establecerNombre: 'Pablo'.	club agregarSocio: socio1; agregarSocioVIP: socio2; agregarSocio: socio3.		4 timesRepeat: [ 		club recibirPagoDe: 'Carlos'. " 500 "		club recibirPagoDe: 'Marcio'. " 700 "	].	3 timesRepeat: [ 		club recibirPagoDe: 'Pablo'.  " 500 "	].		" Act "	cantidadPagada := club cantidadPagadaPor: 'Carlos'.		" Assert "	self assert: cantidadPagada equals: 2000! !!PruebasClub methodsFor: 'tests' stamp: 'tomas 4/25/2020 11:41'!test05SeAgreganTresSociosAlClubYLaCantidadDeSociosEsTres	" Arrange "	| socio1 socio2 socio3 cantidadDeSocios |		socio1 := Socio new.	socio1 establecerNombre: 'Carlos'.	club agregarSocio: socio1.	socio2 := Socio new.	socio2 establecerNombre: 'Marcio'.	club agregarSocioVIP: socio2.		socio3 := Socio new.	socio3 establecerNombre: 'Pablo'.	club agregarSocio: socio3.		" Act "	cantidadDeSocios := club cantidadDeSocios.		" Assert "	self assert: cantidadDeSocios equals: 3! !!PruebasClub methodsFor: 'tests' stamp: 'tomas 4/25/2020 11:44'!test09SeAgreganDosSociosComunesYOtroVipYRealizanSietePagosComunYLaCantidadPagadaPorElSocioVipEs2800	" Arrange "	| socio1 socio2 socio3 cantidadPagada |		socio1 := Socio new.	socio1 establecerNombre: 'Carlos'.	socio2 := Socio new.	socio2 establecerNombre: 'Marcio'.	socio3 := Socio new.	socio3 establecerNombre: 'Pablo'.	club agregarSocio: socio1; agregarSocioVIP: socio2; agregarSocio: socio3.		4 timesRepeat: [ 		club recibirPagoDe: 'Carlos'. " 500 "		club recibirPagoDe: 'Marcio'. " 700 "	].	3 timesRepeat: [ 		club recibirPagoDe: 'Pablo'.  " 500 "	].		" Act "	cantidadPagada := club cantidadPagadaPor: 'Marcio'.		" Assert "	self assert: cantidadPagada equals: 2800! !!PruebasClub methodsFor: 'tests' stamp: 'LuisParedes 4/28/2020 13:47'!test04SeAgregaUnSocioComunYOtroVipYRealizanUnPagoCadaUnoYLaRecaudacionTotalEs1200	" Arrange "	| socio1 socio2 recaudacionTotal |		socio1 := Socio new.	socio1 establecerNombre: 'Carlos'.	club agregarSocio: socio1.	socio2 := Socio new.	socio2 establecerNombre: 'Marcio'.	club agregarSocioVIP: socio2.		club recibirPagoDe: 'Carlos'.	club recibirPagoDe: 'Marcio'.		" Act "	recaudacionTotal := club recaudacionTotal.		" Assert "	self assert: recaudacionTotal equals: 1200! !!PruebasClub methodsFor: 'tests' stamp: 'tomas 4/25/2020 11:40'!test08SeAgreganDosSociosComunesYOtroVipYRealizanSietePagosComunYCuatroVipYLaRecaudacionEs6300	" Arrange "	| socio1 socio2 socio3 recaudacionTotal |		socio1 := Socio new.	socio1 establecerNombre: 'Carlos'.	socio2 := Socio new.	socio2 establecerNombre: 'Marcio'.	socio3 := Socio new.	socio3 establecerNombre: 'Pablo'.	club agregarSocio: socio1; agregarSocioVIP: socio2; agregarSocio: socio3.		club recibirPagoDe: 'Carlos'. " 500 "	club recibirPagoDe: 'Marcio'. " 700 "	3 timesRepeat: [ 		club recibirPagoDe: 'Pablo'.  " 500 "		club recibirPagoDe: 'Carlos'. " 500 "		club recibirPagoDe: 'Marcio'. " 700 "	].		" Act "	recaudacionTotal := club recaudacionTotal.		" Assert "	self assert: recaudacionTotal equals: 6300! !!PruebasClub methodsFor: 'tests' stamp: 'tomas 4/25/2020 11:31'!test06SeAgreganTresSociosAlClubYSeDevuelveElConjuntoDeSusNombres	" Arrange "	| socio1 socio2 socio3 nombresSocios |		socio1 := Socio new.	socio1 establecerNombre: 'Carlos'.	club agregarSocio: socio1.	socio2 := Socio new.	socio2 establecerNombre: 'Marcio'.	club agregarSocioVIP: socio2.	socio3 := Socio new.	socio3 establecerNombre: 'Pablo'.	club agregarSocio: socio3.		" Act "	nombresSocios := club nombresSocios.		" Assert "	self assertCollection: nombresSocios 		equals: (Set withAll: #('Marcio' 'Carlos' 'Pablo'))! !!PruebasClub methodsFor: 'tests' stamp: 'tomas 4/25/2020 11:41'!test07SeAgreganDosSociosComunesYOtroVipYRealizanTresPagosCadaUnoYLaRecaudacionTotalEs5100	" Arrange "	| socio1 socio2 socio3 recaudacionTotal |		socio1 := Socio new.	socio1 establecerNombre: 'Carlos'.	socio2 := Socio new.	socio2 establecerNombre: 'Marcio'.	socio3 := Socio new.	socio3 establecerNombre: 'Pablo'.	club agregarSocio: socio1; agregarSocioVIP: socio2; agregarSocio: socio3.		3 timesRepeat: [ 		club recibirPagoDe: 'Pablo'.  " 500 "		club recibirPagoDe: 'Carlos'. " 500 "		club recibirPagoDe: 'Marcio'. " 700 "	].		" Act "	recaudacionTotal := club recaudacionTotal.		" Assert "	self assert: recaudacionTotal equals: 5100! !!PruebasClub methodsFor: 'tests' stamp: 'tomas 4/25/2020 11:41'!test03SeAgreganDosSociosAlClubYLaCantidadDeSociosEsDos	" Arrange "	| socio1 socio2 cantidadDeSocios |		socio1 := Socio new.	socio1 establecerNombre: 'Carlos'.	club agregarSocio: socio1.	socio2 := Socio new.	socio2 establecerNombre: 'Marcio'.	club agregarSocioVIP: socio2.		" Act "	cantidadDeSocios := club cantidadDeSocios.		" Assert "	self assert: cantidadDeSocios equals: 2! !!PruebasClub methodsFor: 'tests' stamp: 'LuisParedes 4/27/2020 20:25'!test01LaRecaudacionInicialDelClubDebeSerCero	" Arrange "	| recaudacion |		" Act "	recaudacion := club recaudacionTotal.		" Assert "	self assert: recaudacion equals: 0! !!PruebasClub methodsFor: 'tests' stamp: 'tomas 4/25/2020 11:47'!test11SeAgreganDosSociosComunesYOtroVipYRealizanSietePagosComunYLaCantidadPagadaPorElSegundoSocioComunEs1500	" Arrange "	| socio1 socio2 socio3 cantidadPagada |		socio1 := Socio new.	socio1 establecerNombre: 'Carlos'.	socio2 := Socio new.	socio2 establecerNombre: 'Marcio'.	socio3 := Socio new.	socio3 establecerNombre: 'Pablo'.	club agregarSocio: socio1; agregarSocioVIP: socio2; agregarSocio: socio3.		4 timesRepeat: [ 		club recibirPagoDe: 'Carlos'. " 500 "		club recibirPagoDe: 'Marcio'. " 700 "	].	3 timesRepeat: [ 		club recibirPagoDe: 'Pablo'.  " 500 "	].		" Act "	cantidadPagada := club cantidadPagadaPor: 'Pablo'.		" Assert "	self assert: cantidadPagada equals: 1500! !!PruebasClub methodsFor: 'running' stamp: 'tomas 4/25/2020 11:22'!setUp	club := Club new.	club establecerNombre: 'Club Social y Deportivo Orientado a Objetos'.	club establecerTarifaSocio: 500.	club establecerTarifaSocioVIP: 700.! !TestCase subclass: #PruebasSocio	instanceVariableNames: ''	classVariableNames: ''	package: 'tp0.5-Test'!!PruebasSocio methodsFor: 'tests' stamp: 'LuisParedes 4/28/2020 14:19'!test03DadoUnSocioQuePagaTresVecesEntoncesSuCantidadDePagosEsTres	|socio cantPagos|	socio := Socio new.	socio registrarPago.	socio registrarPago.	socio registrarPago.			cantPagos := socio obtenerCantPagos.		self assert: cantPagos equals: 3.! !!PruebasSocio methodsFor: 'tests' stamp: 'LuisParedes 4/28/2020 14:18'!test02DadoUnSocioNuevoSuCantPagosInicialEsCero		|socio cantPagos|	socio := Socio new.		cantPagos := socio obtenerCantPagos.		self assert: cantPagos equals: 0.! !!PruebasSocio methodsFor: 'tests' stamp: 'LuisParedes 4/28/2020 14:25'!test04DadoUnSocioNuevoCuandoSeLeIngresaSuEstadoYSeSolicitaSuEstadoEsElIngresado		|socio estadoEstablecido estadoDevuelto|	socio := Socio new.	estadoEstablecido  := 'socio VIP'.		socio establecerEstado: estadoEstablecido .	estadoDevuelto := socio obtenerEstado.		self assert: estadoDevuelto equals: estadoEstablecido.! !!PruebasSocio methodsFor: 'tests' stamp: 'LuisParedes 4/28/2020 14:16'!test01DadoUnSocioNuevoCuandoSeLeIngresaSuNombreYSeSolicitaSuNombreEsElIngresado		|socio nombreEstablecido nombreDevuelto|	socio := Socio new.	nombreEstablecido  := 'Luis'.		socio establecerNombre: nombreEstablecido .	nombreDevuelto := (socio obtenerNombre).		self assert: nombreDevuelto equals: nombreEstablecido.! !