TestCase subclass: #DistanciaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'R2-AlgoIII-test'!!DistanciaTest methodsFor: 'tests' stamp: 'EddyVega 4/30/2020 07:14'!test04CalcularDistanciaEntreUnRectaYOtraRectaParalelas	"Arrange"	| recta1 recta2 distancia|	recta1 := Recta conA:6 conB:8  conC:2.	recta2 := Recta conA:3 conB:4 conC:7.		"Act"	distancia := recta1 calcularDistanciaCon: recta2.		"Assert"	self assert: distancia equals: 1.  ! !!DistanciaTest methodsFor: 'tests' stamp: 'EddyVega 4/30/2020 06:36'!test02CalcularDistanciaEntreUnaRectaYUnPunto	"Arrange"	| recta punto distancia|	recta := Recta conA:3 conB:4 conC:0.	punto := Punto conX: 3 eY: 4.		"Act"	distancia := recta calcularDistanciaCon: punto.		"Assert"	self assert: distancia equals: 5.  ! !!DistanciaTest methodsFor: 'tests' stamp: 'EddyVega 4/30/2020 07:27'!test05ObtenerErrorAlCalcularDistanciaEntreUnRectaYOtraRectaNoParalelas	"Arrange"	| recta1 recta2 distancia|	recta1 := Recta conA:5 conB:3  conC:0.	recta2 := Recta conA:3 conB:4 conC:0.		"Assert"	self should: [ distancia := recta1 calcularDistanciaCon: recta2. ] raise: RectasNoParalelasError.! !!DistanciaTest methodsFor: 'tests' stamp: 'EddyVega 4/30/2020 06:54'!test03CalcularDistanciaEntreUnPuntoYUnaRecta	"Arrange"	| recta punto distancia|	punto := Punto conX: 3 eY: 4.	recta := Recta conA:3 conB:4 conC:0.		"Act"	distancia := punto calcularDistanciaCon: recta.		"Assert"	self assert: distancia equals: 5.  ! !!DistanciaTest methodsFor: 'tests' stamp: 'EddyVega 4/30/2020 05:29'!test01CalcularDistanciaEntreDosPuntos	"Arrange"	| punto1 punto2 distancia|	punto1 := Punto conX: 3 eY: 4.	punto2 := Punto conX: 6 eY: 8.		"Act"	distancia := punto1 calcularDistanciaCon: punto2.		"Assert"	self assert: distancia equals: 5.  ! !TestCase subclass: #PuntoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'R2-AlgoIII-test'!!PuntoTest methodsFor: 'tests' stamp: 'EddyVega 4/30/2020 04:38'!test05ObtenerProductoInternoEntreDosPuntosInstanciadosEnCoordenadasCartesianas	"Arrange"	| punto1 punto2 productoInterno |	punto1 := Punto conX: 3 eY: 4.	punto2 := Punto conX: 2 eY: 5.		"Act"	productoInterno := punto1 productoInternoCon: punto2.		"Assert"	self assert: productoInterno equals: 26.! !!PuntoTest methodsFor: 'tests' stamp: 'EddyVega 4/30/2020 04:28'!test04ObtenerCoordenadaEnYDeUnPuntoInstanciadoEnCoordenadasPolares	"Arrange"	| punto coordenadaY |	punto := Punto conRho:5 yTheta:53.		"Act"	coordenadaY := punto ordenada.		"Assert"	self assert: coordenadaY equals: 5 * ((53*(Float pi /180)) sin).! !!PuntoTest methodsFor: 'tests' stamp: 'EddyVega 4/30/2020 04:28'!test03ObtenerCoordenadaEnXDeUnPuntoInstanciadoEnCoordenadasPolares	"Arrange"	| punto coordenadaX |	punto := Punto conRho:5 yTheta:53.		"Act"	coordenadaX := punto abcisa.		"Assert"	self assert: coordenadaX equals: 5 * ((53*(Float pi /180)) cos).! !!PuntoTest methodsFor: 'basic tests' stamp: 'EddyVega 4/30/2020 02:24'!test01ObtenerRhoDeUnPuntoInstanciadoEnCoordenadasCartesianas	"Arrange"	| punto rho |	punto := Punto conX:3 eY:4.		"Act"	rho := punto rho.		"Assert"	self assert: rho equals: 5.! !!PuntoTest methodsFor: 'basic tests' stamp: 'EddyVega 4/30/2020 04:26'!test02ObtenerThetaDeUnPuntoInstanciadoEnCoordenadasCartesianas	"Arrange"	| punto theta |	punto := Punto conX:3 eY:4.		"Act"	theta := punto theta.		"Assert"	self assert: theta equals: ( (4/3) arcTan * 180/(Float pi) ).! !TestCase subclass: #RectaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'R2-AlgoIII-test'!!RectaTest methodsFor: 'tests' stamp: 'EddyVega 4/30/2020 04:55'!test01ObtenerPendienteDeLaRectaEnR2	"Arrange"	| recta pendiente |	recta := Recta conA:3 conB:4 conC:0.		"Act"	pendiente := recta pendiente.		"Assert"	self assert: pendiente equals: (-1 * 3/4). ! !!RectaTest methodsFor: 'tests' stamp: 'EddyVega 4/30/2020 05:22'!test02DosRectasSonParalelasEnR2	"Arrange"	| recta1 recta2 paralelas |	recta1 := Recta conA:3 conB:4 conC:0.	recta2 := Recta conA:6 conB:8 conC:0. 		"Act"	paralelas := recta1 esParalelaA: recta2.		"Assert"	self  assert: paralelas. ! !!RectaTest methodsFor: 'tests' stamp: 'EddyVega 4/30/2020 05:25'!test02DosRectasSonPerpendicularesEnR2	"Arrange"	| recta1 recta2 perpendiculares |	recta1 := Recta conA:3 conB:4 conC:0.	recta2 := Recta conA:-4 conB:3 conC:0. 		"Act"	perpendiculares := recta1 esPerpendicularA: recta2.		"Assert"	self  assert: perpendiculares. ! !