Error subclass: #PendienteInexistenteError	instanceVariableNames: ''	classVariableNames: ''	package: 'R2-AlgoIII'!Error subclass: #ProductoInternoError	instanceVariableNames: ''	classVariableNames: ''	package: 'R2-AlgoIII'!Object subclass: #Punto	instanceVariableNames: 'coordenadaX coordenadaY coordenadaRho coordenadaTheta constanteDeRadianesASexagesimal constanteDeSexagesimalARadianes'	classVariableNames: ''	package: 'R2-AlgoIII'!!Punto methodsFor: 'operadores Distancia' stamp: 'EddyVega 4/30/2020 07:03'!calcularDistanciaCon: unSegmento		| distancia |		[ 		unSegmento productoInternoCon: self.		distancia := unSegmento distanciaConAbcisa: coordenadaX yOrdenada: coordenadaY.	]	on: ProductoInternoError 	do: [ distancia := unSegmento distanciaConAbcisa: coordenadaX yOrdenada: coordenadaY. ].		^ distancia.! !!Punto methodsFor: 'operadores Distancia' stamp: 'EddyVega 4/30/2020 06:29'!distanciaConAbcisa: unValorDeAbcisa yOrdenada: unValorDeOrdenada		^ ( ((unValorDeAbcisa - coordenadaX) * (unValorDeAbcisa - coordenadaX) ) + ( ( (unValorDeOrdenada - coordenadaY) * (unValorDeOrdenada - coordenadaY) ) ) )sqrt.! !!Punto methodsFor: 'operadores Distancia' stamp: 'EddyVega 4/30/2020 06:52'!distanciaConConstanteAbcisa: unValorDeConstanteX constanteOrdenada: unValorDeConstanteY yConstanteLineal: unValorDeConstanteLineal 		^ ( ( (unValorDeConstanteX * coordenadaX) + (unValorDeConstanteY * coordenadaY) + (unValorDeConstanteLineal) )abs / ( (unValorDeConstanteX * unValorDeConstanteX) + (unValorDeConstanteY * unValorDeConstanteY) )sqrt ).! !!Punto methodsFor: 'errors' stamp: 'EddyVega 4/30/2020 07:17'!pendiente	PendienteInexistenteError signal.! !!Punto methodsFor: 'getters' stamp: 'EddyVega 4/30/2020 03:56'!theta	^ coordenadaTheta.! !!Punto methodsFor: 'getters' stamp: 'EddyVega 4/30/2020 04:14'!abcisa	^ coordenadaX.! !!Punto methodsFor: 'getters' stamp: 'EddyVega 4/30/2020 03:47'!rho	^ coordenadaRho.! !!Punto methodsFor: 'getters' stamp: 'EddyVega 4/30/2020 03:56'!ordenada	^coordenadaY.! !!Punto methodsFor: 'initialization' stamp: 'EddyVega 4/30/2020 04:07'!initialize 	constanteDeRadianesASexagesimal := 180/(Float pi).	constanteDeSexagesimalARadianes := 1 / constanteDeRadianesASexagesimal.! !!Punto methodsFor: 'generadores' stamp: 'EddyVega 4/30/2020 03:50'!generarRho	coordenadaRho := (((coordenadaX * coordenadaX) + (coordenadaY * coordenadaY )) sqrt).! !!Punto methodsFor: 'generadores' stamp: 'EddyVega 4/30/2020 04:24'!generarTheta	coordenadaTheta := (( coordenadaY / coordenadaX ) arcTan) * constanteDeRadianesASexagesimal.! !!Punto methodsFor: 'generadores' stamp: 'EddyVega 4/30/2020 04:24'!generarOrdenada	coordenadaY := coordenadaRho * ((coordenadaTheta * constanteDeSexagesimalARadianes) sin).! !!Punto methodsFor: 'generadores' stamp: 'EddyVega 4/30/2020 04:23'!generarAbcisa	coordenadaX := coordenadaRho * ((coordenadaTheta * constanteDeSexagesimalARadianes) cos) .! !!Punto methodsFor: 'operadores Producto Interno' stamp: 'EddyVega 4/30/2020 04:41'!obtenerProductoInternoConAbcisa: unaAbcisa yOrdenada: unaOrdenada 		^ (coordenadaX  * unaAbcisa) + (coordenadaY * unaOrdenada).! !!Punto methodsFor: 'operadores Producto Interno' stamp: 'EddyVega 4/30/2020 04:40'!productoInternoCon: unPunto 		^ unPunto obtenerProductoInternoConAbcisa: coordenadaX yOrdenada: coordenadaY.! !!Punto methodsFor: 'initialization-class' stamp: 'EddyVega 4/30/2020 03:46'!conRho: unValorRho yTheta: unValorTheta	coordenadaRho := unValorRho.	coordenadaTheta := unValorTheta.		self generarAbcisa.	self generarOrdenada.	! !!Punto methodsFor: 'initialization-class' stamp: 'EddyVega 4/30/2020 03:47'!conX: unValorX eY: unValorY	coordenadaX := unValorX.	coordenadaY := unValorY.		self generarRho.	self generarTheta.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Punto class	instanceVariableNames: ''!!Punto class methodsFor: 'initialization' stamp: 'EddyVega 4/30/2020 03:07'!conX: unValorX eY: unValorY		| punto |		punto := self new.		punto conX: unValorX eY: unValorY.		^punto.	! !!Punto class methodsFor: 'as yet unclassified' stamp: 'EddyVega 4/30/2020 03:44'!conRho: unValorRho yTheta: unValorTheta	| punto |		punto := self new.		punto conRho: unValorRho yTheta: unValorTheta.		^punto.! !Object subclass: #Recta	instanceVariableNames: 'constanteX constanteY constanteLineal'	classVariableNames: ''	package: 'R2-AlgoIII'!!Recta methodsFor: 'errors' stamp: 'EddyVega 4/30/2020 07:04'!productoInternoCon: unPunto		ProductoInternoError signal.! !!Recta methodsFor: 'initialization-class' stamp: 'EddyVega 4/30/2020 04:52'!conA: unValorA conB: unValorB conC: unValorC	constanteX := unValorA.	constanteY := unValorB.	constanteLineal := unValorC.! !!Recta methodsFor: 'operadores Distancia' stamp: 'EddyVega 4/30/2020 07:23'!distanciaConstanteLineal: unValorDeConstanteLineal		^ ( ( unValorDeConstanteLineal - constanteLineal )abs) / ( ( (constanteX * constanteX) + (constanteY  * constanteY) )sqrt ).! !!Recta methodsFor: 'operadores Distancia' stamp: 'EddyVega 4/30/2020 07:32'!calcularDistanciaCon: unSegmento 		| distancia |		[ 		unSegmento pendiente.		(unSegmento esParalelaA: self) ifFalse: [ RectasNoParalelasError signal. ].		distancia := unSegmento distanciaConstanteLineal: constanteLineal.			] 	on: PendienteInexistenteError 	do: [ distancia :=  unSegmento distanciaConConstanteAbcisa: constanteX constanteOrdenada: constanteY yConstanteLineal: constanteLineal. 		].		^ distancia. ! !!Recta methodsFor: 'operadores Distancia' stamp: 'EddyVega 4/30/2020 07:08'!distanciaConAbcisa: unValorAbcisa yOrdenada: unValorOrdenada	^( ( (constanteX * unValorAbcisa) + (constanteY * unValorOrdenada) + (constanteLineal) )abs / ( (constanteX * constanteX) + (constanteY * constanteY) )sqrt ).		! !!Recta methodsFor: 'operadores Pendiente' stamp: 'EddyVega 4/30/2020 05:22'!esParalelaCon: unaPendiente 		^ (self pendiente = unaPendiente).! !!Recta methodsFor: 'operadores Pendiente' stamp: 'EddyVega 4/30/2020 05:24'!esPerpendicularA: unaRecta 		^ unaRecta esPerpendicularCon: self pendiente.! !!Recta methodsFor: 'operadores Pendiente' stamp: 'EddyVega 4/30/2020 05:16'!esParalelaA: unaRecta 		^unaRecta esParalelaCon: (self pendiente).! !!Recta methodsFor: 'operadores Pendiente' stamp: 'EddyVega 4/30/2020 04:55'!pendiente	^ -1 * (constanteX / constanteY).! !!Recta methodsFor: 'operadores Pendiente' stamp: 'EddyVega 4/30/2020 05:25'!esPerpendicularCon: unaPendiente		^ (self pendiente * unaPendiente) = -1.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Recta class	instanceVariableNames: ''!!Recta class methodsFor: 'as yet unclassified' stamp: 'EddyVega 4/30/2020 04:54'!conA: unValorA conB: unValorB conC: unValorC	| recta |		recta := self new.		recta conA: unValorA conB: unValorB conC: unValorC.		^recta.! !Error subclass: #RectasNoParalelasError	instanceVariableNames: ''	classVariableNames: ''	package: 'R2-AlgoIII'!